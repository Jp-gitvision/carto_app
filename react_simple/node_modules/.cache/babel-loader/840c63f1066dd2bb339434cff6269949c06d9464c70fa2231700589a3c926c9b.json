{"ast":null,"code":"var _jsxFileName = \"/Users/jujupeneau/Desktop/Wildcodeschool_Data_engineer/projet/Lama_dev_login/react_simple/src/components/Map.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, GeoJSON } from 'react-leaflet';\nimport MarkerClusterGroup from 'react-leaflet-cluster';\nimport 'leaflet/dist/leaflet.css';\nimport { Icon } from 'leaflet';\nimport { API } from '/src/services/API';\n\n// URL du fichier GeoJSON (placer le fichier dans le dossier public)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst geojsonUrl = \"/departements.geojson\";\n\n// Composant principal de la carte\nconst Map = () => {\n  _s();\n  // Définir l'icône du marqueur\n  const customerIcon = new Icon({\n    iconUrl: '/img/gps.png',\n    iconSize: [28, 28]\n  });\n  // État pour stocker les données des régions\n  const [regions, setRegions] = useState([]);\n\n  // État pour stocker les données GeoJSON\n  const [geojsonData, setGeojsonData] = useState(null);\n\n  // État pour stocker la région sélectionnée\n  const [selectedRegion, setSelectedRegion] = useState(null);\n\n  // État pour stocker les villes d'une région sélectionnée\n  const [villes, setVilles] = useState([]);\n\n  // Charger les données des régions lors du montage du composant\n  useEffect(() => {\n    const getdataregion = async () => {\n      const response = await API.get(\"/api/personnes-agees-par-regions\");\n      const responseData = await response.data;\n      setRegions(responseData);\n    };\n    getdataregion();\n  }, []);\n\n  //   fetch(IP2 + ':4000/api/personnes-agees-par-regions')\n  //     .then(response => response.json())\n  //     .then(data => setRegions(data))\n  //     .catch(error => console.error('Erreur lors de la récupération des données:', error));\n  // }, []); // Le tableau vide signifie que cet effet ne s'exécute qu'une fois lors du montage\n\n  // Charger les données GeoJSON lors du montage du composant\n  useEffect(() => {\n    fetch(geojsonUrl).then(response => response.json()).then(data => setGeojsonData(data)).catch(error => console.error('Erreur lors de la récupération du fichier GeoJSON:', error));\n  }, []);\n  const handleRegionClick = async regionName => {\n    setSelectedRegion(regionName);\n    const response = await API.get(`/api/villes-par-regions/${regionName}`);\n    const responseData = await response.data;\n    setVilles(responseData);\n  };\n\n  // // Gérer le clic sur une région pour charger les villes de cette région\n  // const handleRegionClick = (IP2, regionName) => {\n\n  //   setSelectedRegion(regionName);\n  //   fetch(IP2 + `:4000/api/villes-par-regions/${regionName}`)\n  //     .then(response => response.json())\n  //     .then(data => setVilles(data))\n  //     .catch(error => console.error('Erreur lors de la récupération des données:', error));\n  // };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      height: '100vh',\n      width: '100%'\n    },\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [46.2276, 2.2137],\n      zoom: 6,\n      style: {\n        height: '100%',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this), geojsonData && /*#__PURE__*/_jsxDEV(GeoJSON\n      // Ajout des données GeoJSON\n      , {\n        data: geojsonData\n\n        // Définition du style initial des polygones\n        ,\n        style: () => ({\n          color: 'white',\n          // Couleur de la bordure en blanc\n          weight: 2,\n          // Épaisseur de la bordure\n          opacity: 1,\n          // Opacité de la bordure\n          dashArray: '3',\n          // Style de la bordure en pointillé\n          fillOpacity: 0.7,\n          // Opacité du remplissage\n          fillColor: '#1396D9' // Couleur de remplissage bleu spécifié\n        })\n\n        // Définition des interactions pour chaque entité GeoJSON\n        ,\n        onEachFeature: (feature, layer) => {\n          layer.on({\n            // Interaction lors du survol avec la souris\n            mouseover: e => {\n              const layer = e.target;\n              layer.setStyle({\n                dashArray: \"\",\n                // Enlève le pointillé lors du survol\n                fillColor: \"#BD0026\",\n                // Change la couleur de remplissage au survol\n                fillOpacity: 0.7,\n                // Opacité du remplissage lors du survol\n                weight: 2,\n                // Épaisseur de la bordure lors du survol\n                opacity: 1,\n                // Opacité de la bordure lors du survol\n                color: \"white\" // Couleur de la bordure en blanc lors du survol\n              });\n            },\n            // Interaction lors du retrait de la souris\n            mouseout: e => {\n              const layer = e.target;\n              layer.setStyle({\n                fillOpacity: 0.7,\n                // Retour à l'opacité initiale du remplissage\n                opacity: 1,\n                // Retour à l'opacité initiale de la bordure\n                weight: 2,\n                // Retour à l'épaisseur initiale de la bordure\n                dashArray: \"3\",\n                // Retour au pointillé de la bordure\n                color: 'white',\n                // Retour à la couleur de la bordure en blanc\n                fillColor: '#1396D9' // Retour à la couleur de remplissage bleu spécifié\n              });\n            },\n            // Interaction lors du clic sur l'entité\n            click: () => {\n              handleRegionClick(feature.properties.name); // Appelle la fonction handleRegionClick avec le nom de la région cliquée\n            }\n          });\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(MarkerClusterGroup, {\n        children: selectedRegion && villes.length > 0 ? villes.map(ville => /*#__PURE__*/_jsxDEV(Marker, {\n          icon: customerIcon,\n          position: [ville.latitude, ville.longitude],\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: [ville.nom, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 31\n            }, this), \"F65-79ans : \", ville.femmes_65_79, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 145,\n              columnNumber: 52\n            }, this), \"F+80ans : \", ville.femmes_80_plus, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 146,\n              columnNumber: 52\n            }, this), \"H65-79ans : \", ville.hommes_65_79, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 147,\n              columnNumber: 52\n            }, this), \"H+80ans: \", ville.hommes_80_plus, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 148,\n              columnNumber: 51\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this)\n        }, ville.nom, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 15\n        }, this)) :\n        // Affichage des marqueurs des régions si aucune région n'est sélectionnée\n        Object.keys(regions).map(region => /*#__PURE__*/_jsxDEV(Marker, {\n          icon: customerIcon,\n          position: [regions[region].latitude, regions[region].longitude],\n          eventHandlers: {\n            click: () => {\n              handleRegionClick(region);\n            }\n          },\n          children: /*#__PURE__*/_jsxDEV(Popup, {\n            children: [\"R\\xE9gion : \", region, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 166,\n              columnNumber: 37\n            }, this), \"F65-79ans : \", regions[region].femmes_65_79, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 167,\n              columnNumber: 62\n            }, this), \"F+80ans : \", regions[region].femmes_80_plus, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 168,\n              columnNumber: 62\n            }, this), \"H65-79ans : \", regions[region].hommes_65_79, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 169,\n              columnNumber: 62\n            }, this), \"H+80ans: \", regions[region].hommes_80_plus, \" \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 61\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 165,\n            columnNumber: 17\n          }, this)\n        }, region, false, {\n          fileName: _jsxFileName,\n          lineNumber: 155,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n};\n_s(Map, \"naidfNdOlsDVb1UyyyUQwkQzgjs=\");\n_c = Map;\nexport default Map;\nvar _c;\n$RefreshReg$(_c, \"Map\");","map":{"version":3,"names":["React","useState","useEffect","MapContainer","TileLayer","Marker","Popup","GeoJSON","MarkerClusterGroup","Icon","API","jsxDEV","_jsxDEV","geojsonUrl","Map","_s","customerIcon","iconUrl","iconSize","regions","setRegions","geojsonData","setGeojsonData","selectedRegion","setSelectedRegion","villes","setVilles","getdataregion","response","get","responseData","data","fetch","then","json","catch","error","console","handleRegionClick","regionName","style","height","width","children","center","zoom","url","fileName","_jsxFileName","lineNumber","columnNumber","color","weight","opacity","dashArray","fillOpacity","fillColor","onEachFeature","feature","layer","on","mouseover","e","target","setStyle","mouseout","click","properties","name","length","map","ville","icon","position","latitude","longitude","nom","femmes_65_79","femmes_80_plus","hommes_65_79","hommes_80_plus","Object","keys","region","eventHandlers","_c","$RefreshReg$"],"sources":["/Users/jujupeneau/Desktop/Wildcodeschool_Data_engineer/projet/Lama_dev_login/react_simple/src/components/Map.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { MapContainer, TileLayer, Marker, Popup, GeoJSON } from 'react-leaflet';\nimport MarkerClusterGroup from 'react-leaflet-cluster';\nimport 'leaflet/dist/leaflet.css';\nimport { Icon } from 'leaflet';\nimport {API} from '/src/services/API';\n\n// URL du fichier GeoJSON (placer le fichier dans le dossier public)\nconst geojsonUrl = \"/departements.geojson\";\n\n// Composant principal de la carte\nconst Map = () => {\n\n    // Définir l'icône du marqueur\n  const customerIcon = new Icon({\n    iconUrl: '/img/gps.png',\n    iconSize: [28, 28],\n  });\n  // État pour stocker les données des régions\n  const [regions, setRegions] = useState([]);\n  \n  // État pour stocker les données GeoJSON\n  const [geojsonData, setGeojsonData] = useState(null);\n  \n  // État pour stocker la région sélectionnée\n  const [selectedRegion, setSelectedRegion] = useState(null);\n  \n  // État pour stocker les villes d'une région sélectionnée\n  const [villes, setVilles] = useState([]);\n\n  // Charger les données des régions lors du montage du composant\n  useEffect(() => {\n\n    const getdataregion = async() => {\n      const response = await API.get(\"/api/personnes-agees-par-regions\");\n      const responseData = await response.data;\n      setRegions(responseData)\n    };\n\n    getdataregion();\n  }, []);\n\n  //   fetch(IP2 + ':4000/api/personnes-agees-par-regions')\n  //     .then(response => response.json())\n  //     .then(data => setRegions(data))\n  //     .catch(error => console.error('Erreur lors de la récupération des données:', error));\n  // }, []); // Le tableau vide signifie que cet effet ne s'exécute qu'une fois lors du montage\n\n  // Charger les données GeoJSON lors du montage du composant\n  useEffect(() => {\n    fetch(geojsonUrl)\n      .then(response => response.json())\n      .then(data => setGeojsonData(data))\n      .catch(error => console.error('Erreur lors de la récupération du fichier GeoJSON:', error));\n  }, []);\n\n\n  const handleRegionClick = async(regionName) => {\n\n    setSelectedRegion(regionName);\n\n    const response = await API.get(`/api/villes-par-regions/${regionName}`);\n    const responseData = await response.data;\n    setVilles(responseData)\n  };\n\n\n  // // Gérer le clic sur une région pour charger les villes de cette région\n  // const handleRegionClick = (IP2, regionName) => {\n\n  //   setSelectedRegion(regionName);\n  //   fetch(IP2 + `:4000/api/villes-par-regions/${regionName}`)\n  //     .then(response => response.json())\n  //     .then(data => setVilles(data))\n  //     .catch(error => console.error('Erreur lors de la récupération des données:', error));\n  // };\n\n  return (\n    <div style={{ height: '100vh', width: '100%' }}>\n      {/* Conteneur de la carte */}\n      <MapContainer center={[46.2276, 2.2137]} zoom={6} style={{ height: '100%', width: '100%' }}>\n        {/* Couche de tuiles de la carte */}\n        <TileLayer url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\" />\n\n        {/* Ajouter la couche GeoJSON si les données sont disponibles */}\n        {geojsonData && (\n      <GeoJSON \n        // Ajout des données GeoJSON\n        data={geojsonData} \n        \n        // Définition du style initial des polygones\n        style={() => ({\n          color: 'white', // Couleur de la bordure en blanc\n          weight: 2, // Épaisseur de la bordure\n          opacity: 1, // Opacité de la bordure\n          dashArray: '3', // Style de la bordure en pointillé\n          fillOpacity: 0.7, // Opacité du remplissage\n          fillColor: '#1396D9' // Couleur de remplissage bleu spécifié\n        })}\n        \n        // Définition des interactions pour chaque entité GeoJSON\n        onEachFeature={(feature, layer) => {\n          layer.on({\n            // Interaction lors du survol avec la souris\n            mouseover: (e) => {\n              const layer = e.target;\n              layer.setStyle({\n                dashArray: \"\", // Enlève le pointillé lors du survol\n                fillColor: \"#BD0026\", // Change la couleur de remplissage au survol\n                fillOpacity: 0.7, // Opacité du remplissage lors du survol\n                weight: 2, // Épaisseur de la bordure lors du survol\n                opacity: 1, // Opacité de la bordure lors du survol\n                color: \"white\", // Couleur de la bordure en blanc lors du survol\n              });\n            },\n            // Interaction lors du retrait de la souris\n            mouseout: (e) => {\n              const layer = e.target;\n              layer.setStyle({\n                fillOpacity: 0.7, // Retour à l'opacité initiale du remplissage\n                opacity: 1, // Retour à l'opacité initiale de la bordure\n                weight: 2, // Retour à l'épaisseur initiale de la bordure\n                dashArray: \"3\", // Retour au pointillé de la bordure\n                color: 'white', // Retour à la couleur de la bordure en blanc\n                fillColor: '#1396D9' // Retour à la couleur de remplissage bleu spécifié\n              });\n            },\n            // Interaction lors du clic sur l'entité\n            click: () => {\n              handleRegionClick(feature.properties.name); // Appelle la fonction handleRegionClick avec le nom de la région cliquée\n            }\n          });\n        }}\n      />\n    )}\n\n        {/* Groupe de marqueurs avec regroupement */}\n        <MarkerClusterGroup>\n          {/* Affichage conditionnel des marqueurs des villes ou des régions */}\n          {selectedRegion && villes.length > 0 ? (\n            villes.map(ville => (\n              <Marker icon={customerIcon} key={ville.nom} position={[ville.latitude, ville.longitude]}>\n                <Popup>\n                  {ville.nom} <br />\n                  F65-79ans : {ville.femmes_65_79} <br />\n                  F+80ans : {ville.femmes_80_plus} <br />\n                  H65-79ans : {ville.hommes_65_79} <br />\n                  H+80ans: {ville.hommes_80_plus} <br />\n                </Popup>\n              </Marker>\n            ))\n          ) : (\n            // Affichage des marqueurs des régions si aucune région n'est sélectionnée\n            Object.keys(regions).map(region => (\n              <Marker \n                icon={customerIcon}\n                key={region}\n                position={[regions[region].latitude, regions[region].longitude]}\n                eventHandlers={{\n                  click: () => {\n                    handleRegionClick(region);\n                  },\n                }}\n              >\n                <Popup>\n                  Région : {region} <br />\n                  F65-79ans : {regions[region].femmes_65_79} <br />\n                  F+80ans : {regions[region].femmes_80_plus} <br />\n                  H65-79ans : {regions[region].hommes_65_79} <br />\n                  H+80ans: {regions[region].hommes_80_plus} <br />\n                </Popup>\n              </Marker>\n            ))\n          )}\n        </MarkerClusterGroup>\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default Map;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}