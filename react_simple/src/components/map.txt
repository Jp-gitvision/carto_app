// Import des modules nécessaires de React et React-Leaflet
import React, { useState, useEffect } from 'react';
import { MapContainer, TileLayer, Marker, Popup, GeoJSON } from 'react-leaflet';
import MarkerClusterGroup from 'react-leaflet-cluster';
import 'leaflet/dist/leaflet.css';
import RegionMarkers from './RegionMarkerList';
import { Icon } from 'leaflet';

// Définir l'icône du marqueur
const customerIcon = new Icon({
  iconUrl: require('/Users/jujupeneau/Desktop/Wildcodeschool_Data_engineer/projet/Lama_dev_login/my-react-passport-app/src/img/espace-reserve.png'),
  iconSize: [38, 38],
});

// URL du fichier GeoJSON (placer le fichier dans le dossier public)
const geojsonUrl = "/departements.geojson";

// Composant principal de la carte
const Map = () => {
  // État pour stocker les données des régions
  const [regions, setRegions] = useState([]);
  
  // État pour stocker les données GeoJSON
  const [geojsonData, setGeojsonData] = useState(null);
  
  // État pour stocker la région sélectionnée
  const [selectedRegion, setSelectedRegion] = useState(null);
  
  // État pour stocker les villes d'une région sélectionnée
  const [villes, setVilles] = useState([]);

  // Charger les données des régions lors du montage du composant
  useEffect(() => {
    fetch('http://localhost:4000/api/personnes-agees-par-region')
      .then(response => response.json())
      .then(data => setRegions(data))
      .catch(error => console.error('Erreur lors de la récupération des données:', error));
  }, []); // Le tableau vide signifie que cet effet ne s'exécute qu'une fois lors du montage

  // Charger les données GeoJSON lors du montage du composant
  useEffect(() => {
    fetch(geojsonUrl)
      .then(response => response.json())
      .then(data => setGeojsonData(data))
      .catch(error => console.error('Erreur lors de la récupération du fichier GeoJSON:', error));
  }, []);

  // Gérer le clic sur une région pour charger les villes de cette région
  const handleRegionClick = (regionName) => {
    setSelectedRegion(regionName);
    fetch(`http://localhost:4000/api/villes-par-region/${regionName}`)
      .then(response => response.json())
      .then(data => setVilles(data))
      .catch(error => console.error('Erreur lors de la récupération des données:', error));
  };

  return (
    <div style={{ height: '100vh', width: '100%' }}>
      {/* Conteneur de la carte */}
      <MapContainer center={[46.2276, 2.2137]} zoom={6} style={{ height: '100%', width: '100%' }}>
        {/* Couche de tuiles de la carte */}
        <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />

        {/* Ajouter la couche GeoJSON si les données sont disponibles */}
        {geojsonData && (
      <GeoJSON 
        // Ajout des données GeoJSON
        data={geojsonData} 
        
        // Définition du style initial des polygones
        style={() => ({
          color: 'white', // Couleur de la bordure en blanc
          weight: 2, // Épaisseur de la bordure
          opacity: 1, // Opacité de la bordure
          dashArray: '3', // Style de la bordure en pointillé
          fillOpacity: 0.7, // Opacité du remplissage
          fillColor: '#1396D9' // Couleur de remplissage bleu spécifié
        })}
        
        // Définition des interactions pour chaque entité GeoJSON
        onEachFeature={(feature, layer) => {
          layer.on({
            // Interaction lors du survol avec la souris
            mouseover: (e) => {
              const layer = e.target;
              layer.setStyle({
                dashArray: "", // Enlève le pointillé lors du survol
                fillColor: "#BD0026", // Change la couleur de remplissage au survol
                fillOpacity: 0.7, // Opacité du remplissage lors du survol
                weight: 2, // Épaisseur de la bordure lors du survol
                opacity: 1, // Opacité de la bordure lors du survol
                color: "white", // Couleur de la bordure en blanc lors du survol
              });
            },
            // Interaction lors du retrait de la souris
            mouseout: (e) => {
              const layer = e.target;
              layer.setStyle({
                fillOpacity: 0.7, // Retour à l'opacité initiale du remplissage
                opacity: 1, // Retour à l'opacité initiale de la bordure
                weight: 2, // Retour à l'épaisseur initiale de la bordure
                dashArray: "3", // Retour au pointillé de la bordure
                color: 'white', // Retour à la couleur de la bordure en blanc
                fillColor: '#1396D9' // Retour à la couleur de remplissage bleu spécifié
              });
            },
            // Interaction lors du clic sur l'entité
            click: () => {
              handleRegionClick(feature.properties.name); // Appelle la fonction handleRegionClick avec le nom de la région cliquée
            }
          });
        }}
      />
    )}




        {/* Groupe de marqueurs avec regroupement */}
        <MarkerClusterGroup>
          {/* Affichage conditionnel des marqueurs des villes ou des régions */}
          {selectedRegion && villes.length > 0 ? (
            villes.map(ville => (
              <Marker icon={customerIcon} key={ville.nom} position={[ville.latitude, ville.longitude]}>
                <Popup>
                  {ville.nom} <br />
                  F65-79ans : {ville.femmes_65_79} <br />
                  F+80ans : {ville.femmes_80_plus} <br />
                  H65-79ans : {ville.hommes_65_79} <br />
                  H+80ans: {ville.hommes_80_plus} <br />
                </Popup>
              </Marker>
            ))
          ) : (
            <RegionMarkers
              regions={regions}
              selectedRegion={selectedRegion}
              setSelectedRegion={setSelectedRegion}
              handleRegionClick={handleRegionClick}
            />
          )}
        </MarkerClusterGroup>
      </MapContainer>
    </div>
  );
};

export default Map;
