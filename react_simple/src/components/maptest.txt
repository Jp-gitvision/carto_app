// Import des modules nécessaires de React et React-Leaflet
import React, { useState, useEffect } from 'react';
import { MapContainer, TileLayer, Marker, Popup, GeoJSON, Tooltip } from 'react-leaflet';
import MarkerClusterGroup from 'react-leaflet-cluster';
import 'leaflet/dist/leaflet.css';
import RegionMarkers from './RegionMarkerList';
import { Icon } from 'leaflet';

// Définir l'icône du marqueur
const customerIcon = new Icon({
  iconUrl: require('/Users/jujupeneau/Desktop/Wildcodeschool_Data_engineer/projet/Lama_dev_login/my-react-passport-app/src/img/espace-reserve.png'),
  iconSize: [38, 38],
});

// URL du fichier GeoJSON (placer le fichier dans le dossier public)
const geojsonUrl = "/regions.geojson";

// Composant principal de la carte
const Map = () => {
  // État pour stocker les données des régions
  const [regions, setRegions] = useState([]);
  
  // État pour stocker les données GeoJSON
  const [geojsonData, setGeojsonData] = useState(null);
  console.log(geojsonData);
  
  // État pour stocker la région sélectionnée
  const [selectedRegion, setSelectedRegion] = useState(null);
  
  // État pour stocker les villes d'une région sélectionnée
  const [villes, setVilles] = useState([]);

  // État pour stocker la région survolée
  const [hoveredRegion, setHoveredRegion] = useState(null);
  const [hoverPosition, setHoverPosition] = useState([0, 0]);

  // Charger les données des régions lors du montage du composant
  useEffect(() => {
    fetch('http://localhost:4000/api/personnes-agees-par-region')
      .then(response => response.json())
      .then(data => setRegions(data))
      .catch(error => console.error('Erreur lors de la récupération des données:', error));
  }, []); // Le tableau vide signifie que cet effet ne s'exécute qu'une fois lors du montage

  // Charger les données GeoJSON lors du montage du composant
  useEffect(() => {
    fetch(geojsonUrl)
      .then(response => response.json())
      .then(data => setGeojsonData(data))
      .catch(error => console.error('Erreur lors de la récupération du fichier GeoJSON:', error));
  }, []);

  // Gérer le clic sur une région pour charger les villes de cette région
  const handleRegionClick = (regionName) => {
    setSelectedRegion(regionName);
    fetch(`http://localhost:4000/api/villes-par-region/${regionName}`)
      .then(response => response.json())
      .then(data => setVilles(data))
      .catch(error => console.error('Erreur lors de la récupération des données:', error));
  };

  // Fonction pour gérer le survol d'une région
  const handleRegionMouseOver = (event, regionName) => {
    setHoveredRegion(regionName);
    setHoverPosition([event.latlng.lat, event.latlng.lng]);
    event.target.setStyle({
      dashArray : "",
      weight: 2,
      color: '#666',
      fillOpacity: 0.7
    });
  };

  // Fonction pour gérer la sortie de survol d'une région
  const handleRegionMouseOut = (event) => {
    setHoveredRegion(null);
    event.target.setStyle({
      dashArray : 3,
      weight: 1,
      color: '#3388ff',
      fillOpacity: 0.2
    });
  };

  return (
    <div style={{ height: '100vh', width: '100%' }}>
      {/* Conteneur de la carte */}
      <MapContainer center={[46.2276, 2.2137]} zoom={6} style={{ height: '100%', width: '100%' }}>
        {/* Couche de tuiles de la carte */}
        <TileLayer url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png" />

        {/* Ajouter la couche GeoJSON si les données sont disponibles */}
        {geojsonData && (
          <GeoJSON
            data={geojsonData}
            onEachFeature={(feature, layer) => {
              const regionName = feature.properties.name;
              layer.on({
                mouseover: (event) => handleRegionMouseOver(event, regionName),
                mouseout: handleRegionMouseOut,
                click: () => handleRegionClick(regionName)
              });
            }}
            style={{
              weight: 1,
              color: '#3388ff',
              fillOpacity: 0.2
            }}
          />
        )}

        {/* Afficher le Tooltip de la région survolée */}
        {hoveredRegion && regions[hoveredRegion] && (
          <Tooltip
            position={hoverPosition}
            direction="top"
            offset={[0, -30]}
            opacity={1}
          >
            <div>
              {hoveredRegion} <br />
              F65-79: {regions[hoveredRegion].femmes_65_79} <br />
              F80+: {regions[hoveredRegion].femmes_80_plus} <br />
              H65-79: {regions[hoveredRegion].hommes_65_79} <br />
              H80+: {regions[hoveredRegion].hommes_80_plus}
            </div>
          </Tooltip>
        )}

        {/* Groupe de marqueurs avec regroupement */}
        <MarkerClusterGroup>
          {/* Affichage conditionnel des marqueurs des villes ou des régions */}
          {selectedRegion && villes.length > 0 ? (
            villes.map(ville => (
              <Marker icon={customerIcon} key={ville.nom} position={[ville.latitude, ville.longitude]}>
                <Popup>
                  {ville.nom} <br />
                  F65-79ans : {ville.femmes_65_79} <br />
                  F+80ans : {ville.femmes_80_plus} <br />
                  H65-79ans : {ville.hommes_65_79} <br />
                  H+80ans: {ville.hommes_80_plus} <br />
                </Popup>
              </Marker>
            ))
          ) : (
            <RegionMarkers
              regions={regions}
              selectedRegion={selectedRegion}
              setSelectedRegion={setSelectedRegion}
              handleRegionClick={handleRegionClick}
            />
          )}
        </MarkerClusterGroup>
      </MapContainer>
    </div>
  );
};

export default Map;
